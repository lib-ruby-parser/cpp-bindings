name: test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: "${{ matrix.build.cxx }} on ${{ matrix.build.os }}"
    runs-on: ${{ matrix.build.os }}
    env:
      RUST_BACKTRACE: 1
      CARGO_BUILD_TARGET: ${{ matrix.build.target }}
    strategy:
      fail-fast: false
      matrix:
        build:
          # - { os: ubuntu-20.04,   target: x86_64-unknown-linux-gnu, make_command: test-all, cc: clang-10, cxx: clang++-10, ld: ld.lld-10 }
          # - { os: macos-latest,   target: x86_64-apple-darwin, make_command: test    , cc: clang,    cxx: clang++,    ld: ld }
          - { os: windows-latest, target: x86_64-pc-windows-gnu, make_command: test,     cc: clang,    cxx: clang++,    ld: ld }

    steps:
      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-msvc
          target: ${{ matrix.build.target }}
          override: true

      - name: checkout
        uses: actions/checkout@v2

      - name: setup compiler
        shell: bash
        run: |
          uname -s
          which find

          echo "CC=${{ matrix.build.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.build.cxx }}" >> $GITHUB_ENV
          # echo "LD=${{ matrix.build.ld }}" >> $GITHUB_ENV

      - name: setup clang on windows
        # shell: bash
        if: runner.os == 'Windows'
        run: |
          # echo $PATH
          # clang++ --version

          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          # echo "/c/msys64/mingw64/bin" >> $GITHUB_PATH
          # echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;

      - name: make sure compiler are available
        shell: bash
        run: |
          which "$CC"
          # which "$CXX"
          # which "$LD"
          # $CC --version
          # $CXX --version
          # $LD --version

      - name: install valgrind
        shell: bash
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: setup
        shell: bash
        run: make setup

      - name: run tests
        shell: bash
        run: |
          # which clang
          make ${{ matrix.build.make_command }}
